Commands
composer require picqer/php-barcode-generator

Controller
<?php

namespace App\Http\Controllers\Barcode;

use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\Crypt;
use Picqer\Barcode\BarcodeGeneratorPNG;

class ProductBarcodeController extends Controller
{
    public function index(string $encryptedId)
    {
        try {
            $productId = Crypt::decrypt($encryptedId);
        } catch (\Exception $e) {
            abort(403, 'Invalid or tampered ID.');
        }

        $generator = new BarcodeGeneratorPNG();
        $barcode = $generator->getBarcode($productId, $generator::TYPE_CODE_128);

        // Create a base image
        $barcodeImage = imagecreatefromstring($barcode);

        // Get dimensions
        $barcodeWidth = imagesx($barcodeImage);
        $barcodeHeight = imagesy($barcodeImage);
        $textHeight = 20;

        // Create a new image with extra space for the text
        $finalImage = imagecreatetruecolor($barcodeWidth, $barcodeHeight + $textHeight);

        // Set white background
        $white = imagecolorallocate($finalImage, 255, 255, 255);
        imagefill($finalImage, 0, 0, $white);

        // Copy barcode onto new image
        imagecopy($finalImage, $barcodeImage, 0, 0, 0, 0, $barcodeWidth, $barcodeHeight);

        // Add text (Product ID) under barcode
        $black = imagecolorallocate($finalImage, 0, 0, 0);
        $fontSize = 3;
        $textWidth = imagefontwidth($fontSize) * strlen($productId);
        $x = ($barcodeWidth - $textWidth) / 2;
        $y = $barcodeHeight + 2;

        imagestring($finalImage, $fontSize, $x, $y, $productId, $black);

        // Output image as PNG
        ob_start();
        imagepng($finalImage);
        $imageData = ob_get_clean();

        // Cleanup
        imagedestroy($barcodeImage);
        imagedestroy($finalImage);

        return response($imageData)
            ->header('Content-Type', 'image/png')
            ->header('Content-Disposition', 'inline; filename="barcode_'.$productId.'.png"');
    }
}



Blade
<a href="{{ route(getUserPrefix().'.product.barcode', $encryptedId) }}" class="dropdown-item" download>
  <i class="fas fa-barcode"></i> {{ __('Bar Code') }}
</a>

Route
Route::get('product-barcode/{id}', [ProductBarcodeController::class, 'index'])->name('admin.product.barcode');
