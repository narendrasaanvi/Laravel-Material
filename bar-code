Commands
composer require picqer/php-barcode-generator

Controller


<?php

namespace App\Http\Controllers\Barcode;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;

class ProductBarcodeController extends Controller
{
    public function index(string $productCode)
    {
        $barcodeData = $productCode; // decrypt($encryptedId) if needed

        // Generate barcode PNG
        $generator = new \Picqer\Barcode\BarcodeGeneratorPNG();
        $barcode = $generator->getBarcode($barcodeData, $generator::TYPE_CODE_128);

        // Create image from barcode
        $barcodeImage = imagecreatefromstring($barcode);

        // Get dimensions
        $barcodeWidth = imagesx($barcodeImage);
        $barcodeHeight = imagesy($barcodeImage);
        $fontHeight = 20;

        // Create new image with extra height for text
        $finalImage = imagecreatetruecolor($barcodeWidth, $barcodeHeight + $fontHeight + 10);

        // Set background to white
        $white = imagecolorallocate($finalImage, 255, 255, 255);
        imagefilledrectangle($finalImage, 0, 0, $barcodeWidth, $barcodeHeight + $fontHeight + 10, $white);

        // Copy barcode into new image
        imagecopy($finalImage, $barcodeImage, 0, 0, 0, 0, $barcodeWidth, $barcodeHeight);

        // Add text (barcode value)
        $black = imagecolorallocate($finalImage, 0, 0, 0);
        $fontSize = 5; // built-in font size
        $textWidth = imagefontwidth($fontSize) * strlen($barcodeData);
        $textX = ($barcodeWidth - $textWidth) / 2;
        $textY = $barcodeHeight + 5;
        imagestring($finalImage, $fontSize, $textX, $textY, $barcodeData, $black);

        // Capture output
        ob_start();
        imagepng($finalImage);
        $imageData = ob_get_clean();

        // Free memory
        imagedestroy($barcodeImage);
        imagedestroy($finalImage);

        // Return image with download headers
        return response($imageData)
            ->header('Content-Type', 'image/png')
            ->header('Content-Disposition', 'attachment; filename="barcode_with_text.png"');
    }

}




Blade
<a href="{{ route(getUserPrefix().'.product.barcode', $encryptedId) }}" class="dropdown-item" download>
  <i class="fas fa-barcode"></i> {{ __('Bar Code') }}
</a>

Route
Route::get('product-barcode/{id}', [ProductBarcodeController::class, 'index'])->name('admin.product.barcode');
